buildscript {
    ext {
        springBootVersion = '2.0.2.RELEASE'
        querydslVersion    = "4.1.4"
        metaModelsSourcesDir = file("src/main/generated")
    }
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '1.14'
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.9"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

gradle.projectsLoaded {
    rootProject.allprojects {
        buildDir = "build"
    }
}

idea {
    module {
        sourceDirs += metaModelsSourcesDir
        generatedSourceDirs += metaModelsSourcesDir
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}

sourceSets {
    main {
        java {
            srcDir metaModelsSourcesDir
        }
    }
}

group = 'com.lolsearch'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

project.afterEvaluate {
    project.tasks.compileQuerydsl.doFirst {
        delete metaModelsSourcesDir;
        metaModelsSourcesDir.mkdirs();
    }
    project.tasks.compileQuerydsl.options.compilerArgs = [
            "-proc:only",
            "-processor", 'com.querydsl.apt.jpa.JPAAnnotationProcessor' +
                    ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor',
            "-s",metaModelsSourcesDir
    ]
}

clean{
    delete metaModelsSourcesDir;
}

querydsl {
    querydslSourcesDir = metaModelsSourcesDir
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-jooq')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-websocket')
    compile("com.querydsl:querydsl-sql-spatial:${querydslVersion}")
    compile("com.querydsl:querydsl-jpa:${querydslVersion}")
    runtime('org.springframework.boot:spring-boot-devtools')
    compile('org.projectlombok:lombok')
    runtime('com.h2database:h2')
    runtime('mysql:mysql-connector-java')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
}
